#!/usr/bin/env python3

import base64
import os
import sys
import termios
import tty

# Uses OSC 52 to yank the passed argument
# Requires kitty to have 'write-clipboard' for clipboard_control

def main():
    if sys.stdout.isatty():
        tty_path = os.ttyname(sys.stdout.fileno())
        out = os.open(tty_path, os.O_WRONLY, os.O_SYNC)
    # If in a dtach session, need to traverse ppids and envs to find a fresh `SSH_TTY`
    elif os.environ.get('DTACH'):
        raise "DTACH not supported yet"
    elif (tty_path := os.environ.get('SSH_TTY')):
        out = os.open(tty_path, os.O_WRONLY, os.O_SYNC)
    else:
        raise "no ssh tty"

    data = sys.stdin.read()
    wordenc = base64.b64encode(data.encode())

    pastepayload = b'\033]52;c;' + wordenc + b'\a'

    old = termios.tcgetattr(out)
    try:
        termios.tcdrain(out)
        tty.setraw(out)
        written = os.writev(out, [pastepayload])
        if written != len(pastepayload):
            raise "write was not atomic"
    finally:
        termios.tcdrain(out)
        termios.tcsetattr(out, termios.TCSADRAIN, old)

if __name__ == '__main__':
    main()


