#!/usr/bin/env python3

import base64
import os
import sys
import termios
import tty

# Uses OSC 52 to paste to stdout
# Requires kitty to have 'write-read' for clipboard_control

def main():
    if sys.stdout.isatty():
        tty_path = os.ttyname(sys.stdout.fileno())
        out = os.open(tty_path, os.O_RDWR, os.O_SYNC)
    # If in a dtach session, need to traverse ppids and envs to find a fresh `SSH_TTY`
    elif os.environ.get('DTACH'):
        raise "DTACH not supported yet"
    elif (tty_path := os.environ.get('SSH_TTY')):
        out = os.open(tty_path, os.O_RDWR, os.O_SYNC)
    else:
        raise "no ssh tty"

    old = termios.tcgetattr(out)

    try:
        tty.setraw(out)
        readclip = b'\033]52;c;?\a'
        os.write(out, readclip)

        payload = bytearray(65536)

        bytes_read = os.readv(out, [payload])
        payload = payload[0:bytes_read]

        idx = payload.index(b'\033]52;c;')
        payload = payload[idx:]

        while (idx := payload.find(b'\x1b\\')) == -1:
            payload2 = bytearray(65536)
            bytes_read = os.readv(out, [payload2])
            payload2 = payload2[0:bytes_read]
            payload += payload2

        decoded = base64.b64decode(payload[7:idx])

    finally:
        termios.tcsetattr(out, termios.TCSADRAIN, old)

    print(decoded.decode("utf-8"), end='')
    sys.stdout.buffer.flush()


if __name__ == '__main__':
    main()

