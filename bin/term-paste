#!/usr/bin/env python3

import base64
import os
import sys
import termios
import tty

# Uses OSC 52 to paste to stdout
# Requires kitty to have 'write-read' for clipboard_control

def main():
    if (tty_path := os.environ.get('PASTE_TTY')):
        out = os.open(tty_path, os.O_RDWR, os.O_SYNC)
        if not os.isatty(out):
            raise 'PASTE_TTY is not a real tty:'
    elif sys.stdout.isatty():
        tty_path = os.ttyname(sys.stdout.fileno())
        out = os.open(tty_path, os.O_RDWR, os.O_SYNC)
    # If in a dtach session, need to traverse ppids and envs to find a fresh `SSH_TTY`
    elif os.environ.get('DTACH'):
        raise "DTACH not supported yet"
    elif (tty_path := os.environ.get('SSH_TTY')):
        out = os.open(tty_path, os.O_RDWR, os.O_SYNC)
    else:
        raise "no ssh tty"

    old = termios.tcgetattr(out)
    try:
        tty.setraw(out)
        readclip = b'\033]52;c;?\a'
        os.write(out, readclip)

        payload = os.read(out, 65536)
        payload = payload[7:]
        payload = payload[:-2]

    finally:
        termios.tcsetattr(out, termios.TCSADRAIN, old)

    decoded = base64.b64decode(payload)
    print(decoded.decode('utf-8'), end='')

if __name__ == "__main__":
    main()
